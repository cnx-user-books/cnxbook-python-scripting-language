<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Itse1359-1130-Unpacking Tuples</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m51378</md:content-id>
  <md:title>Itse1359-1130-Unpacking Tuples</md:title>
  <md:abstract>This module will teach you about unpacking tuples in Python.</md:abstract>
  <md:uuid>091d7285-3020-451c-89e4-47eefddfb513</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>



		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1004">
<link id="a1004" target-id="Introduction">

Introduction

</link>




</item>


	

<item id="li1005">
<link id="a1005" target-id="What_is_a_tuple">

What is a tuple?


</link>




</item>


	

<item id="li1006">
<link id="a1006" target-id="Sample_program">

Sample program


</link>


	

<list id="ul1003" list-type="bulleted">

		

<item id="li1007">
<link id="a1007" target-id="Program_to_unpack_a_tuple_">

Program to unpack a tuple 

</link>

 

</item>


		

<item id="li1008">
<link id="a1008" target-id="Tuples_can_be_concatenated_">

Tuples can be concatenated 
		

</link>

 

</item>


		

<item id="li1009">
<link id="a1009" target-id="Unusual_syntax">

Unusual syntax

</link>


</item>


		

<item id="li1010">
<link id="a1010" target-id="Packing_and_unpacking_a_tuple">

Packing and unpacking a tuple

</link>


</item>


		

<item id="li1011">
<link id="a1011" target-id="Unpack_the_tuple_into_the_mutable_list">

Unpack the tuple into the mutable list

</link>


</item>


	

</list>




</item>


	

<item id="li1012">
<link id="a1012" target-id="Complete_program_listing">

Complete program listing

</link>


</item>


	

<item id="li1013">
<link id="a1013" target-id="Visualization_of_the_tuples_in_the_program">

Visualization of the tuples in the program

</link>


</item>



	

<item id="li1014">
<link id="a1014" target-id="Run_the_program">

Run the program

</link>


</item>



	

<item id="li1015">
<link id="a1015" target-id="Miscellaneous">

Miscellaneous

</link>


</item>





</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1000">
This module is one in a collection of modules on Python designed for 
teaching 

<emphasis id="em1000" effect="italics">
ITSE 1359 Introduction to Scripting Languages: Python

</emphasis>
 at Austin Community 
College in Austin, TX.

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1001">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
	and Listings 
	while you are reading about them.

</para>




<para id="p1002">
<emphasis id="em1001" effect="italics">
(Note to blind and visually impaired students: most of the Figures and all of the 
Listings in 
this module are presented in plain text format and should be accessible using an 
audio screen reader or a braille display.)

</emphasis>
</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1016">
<link id="a1016" target-id="Image_2">

Figure 1

</link>

. Output from the code in Listing 1.

</item>


		

<item id="li1017">
<link id="a1017" target-id="Image_4">

Figure 2

</link>

. Output from the code in Listing 2.

</item>


		

<item id="li1018">
<link id="a1018" target-id="Image_6">

Figure 3

</link>

. Output from the code in Listing 3.

</item>


		

<item id="li1019">
<link id="a1019" target-id="Image_8">

Figure 4

</link>

. Output from the code in Listing 4.

</item>


		

<item id="li1020">
<link id="a1020" target-id="Figure_5">

Figure 5

</link>

. Visualization of the tuples in the program.

</item>


		

<item id="li1021">
<link id="a1021" target-id="Image_9">

Figure 6

</link>

. Output from the modified program.

</item>


	

</list>




</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1005" list-type="bulleted">

		

<item id="li1022">
<link id="a1022" target-id="Image_1">

Listing 1

</link>

. Beginning of the program. 

</item>


		

<item id="li1023">
<link id="a1023" target-id="Image_3">

Listing 2

</link>

. Unpack the tuple and print individual elements.

</item>


		

<item id="li1024">
<link id="a1024" target-id="Image_5">

Listing 3

</link>

. Unpack the tuple into the mutable list. 

</item>


		

<item id="li1025">
<link id="a1025" target-id="Image_7">

Listing 4

</link>

. Complete program listing.

</item>




</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Introduction" effect="bold">

Introduction

</emphasis>


</title>




<para id="p1003">
This module is part of a series of modules designed to teach you about 
tuples. 

</para>




<para id="p1004">
Earlier modules have illustrated 

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1026">
How to create 

<emphasis id="em1002" effect="italics">
(pack)

</emphasis>
 a tuple.

</item>


	

<item id="li1027">
How to access a tuple item using indexing.

</item>


	

<item id="li1028">
How to slice a tuple.

</item>


	

<item id="li1029">
How to nest tuples.

</item>


	

<item id="li1030">
How to create empty tuples.

</item>


	

<item id="li1031">
How to create single-item tuples.

</item>




</list>




<para id="p1005">
This module will teach you about unpacking tuples. 

</para>




</section>
<section id="h11003">
<title>
<emphasis id="What_is_a_tuple" effect="bold">

What is a tuple

</emphasis>

?

</title>




<para id="p1006">
A tuple is an immutable ordered list of objects. It can contain references to 
any type of object. See earlier modules in this series for a more detailed 
description.

</para>




</section>
<section id="h11004">
<title>
<emphasis id="Sample_program" effect="bold">

Sample program

</emphasis>


</title>




<section id="h21001">
<title>
<emphasis id="Program_to_unpack_a_tuple_" effect="bold">

Program to unpack a tuple 

</emphasis>

 

</title>




<para id="p1007">
<link id="a1026" target-id="Image_7">

Listing 4

</link>

 presents a Python program that: 

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1032">
Creates (packs) two simple tuples.

</item>


	

<item id="li1033">
Creates (packs) a third tuple by concatenating the first two tuples.

</item>


	

<item id="li1034">
Displays the third tuple.

</item>


	

<item id="li1035">
Unpacks the third tuple, assigning each item of the tuple into a 
	separate variable.

</item>


	

<item id="li1036">
Displays each of the variables.

</item>


	

<item id="li1037">
Creates and displays a mutable list object containing five strings.

</item>


	

<item id="li1038">
Unpacks the tuple created earlier assigning the four items from the 
	tuple into the first four items in the list.

</item>


	

<item id="li1039">
Displays the list.

</item>




</list>




<para id="p1008">
<link id="a1027" target-id="Image_8">

Figure 4

</link>

 shows the output produced by the program in 

<link id="a1028" target-id="Image_7">

Listing 4

</link>

.

</para>




<para id="p1009">
<link id="a1029" target-id="Figure_5">

Figure 5

</link>

 shows a visualization of the tuples in the 
program after the first five statements in the code block have been executed. 
This is a case where you need to step through the program and observe changes in 
the diagram on the right to appreciate the behavior of the program.

</para>




<para id="p1010">
I will explain this program in fragments. 

<link id="a1030" target-id="Image_1">

Listing 1

</link>

 
shows the beginning of the program.

</para>


	

<table id="table1000" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Image_1" effect="bold">

Listing 1

</emphasis>

. Beginning of the 
				program.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">
# Illustrates unpacking a tuple
#------------------------------

# Create a pair of tuples
t1 = 1,2
t2 = "A","B"

# Concatenate and print them
t3 = t1 + t2
print(t3)
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






</section>
<section id="h21002">
<title>
<emphasis id="Tuples_can_be_concatenated_" effect="bold">

Tuples can be concatenated 

</emphasis>

 

</title>




<para id="p1011">
As shown in 

<link id="a1031" target-id="Image_1">

Listing 1

</link>

, tuples support the concatenation (+) operator. You can 
concatenate two or more tuples to produce a new tuple. This program creates two 
simple tuples, and then concatenates them to create a third tuple. 

</para>




<para id="p1012">
<link id="a1032" target-id="Image_2">

Figure 1

</link>

 shows the output produced by the code in 

<link id="a1033" target-id="Image_1">

Listing 1

</link>

. By now, the 
creation and display of simple tuples should be very familiar to you based on 
earlier modules. Therefore, I won't discuss 
this part of the program further. 

</para>


	

<table id="table1001" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Image_2" effect="bold">

Figure 1

</emphasis>

. Output from the code 
				in Listing 1.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">
(1, 2, 'A', 'B')
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






</section>
<section id="h21003">
<title>
<emphasis id="Unusual_syntax" effect="bold">

Unusual syntax

</emphasis>


</title>




<para id="p1013">
The code in 

<link id="a1034" target-id="Image_3">

Listing 2

</link>

 is not quite so straightforward. In fact, it looks rather 
strange if you come from a conventional C, C++, or Java programming background.


</para>


	

<table id="table1002" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Image_3" effect="bold">

Listing 2

</emphasis>

. Unpack the tuple and print individual elements.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1002" display="block">
# Unpack the tuple and print individual elements
w,x,y,z = t3
print(w)
print(x)
print(y)
print(z)
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1014">
<link id="a1035" target-id="Image_4">

Figure 2

</link>

 shows the output produced by the code in 

<link id="a1036" target-id="Image_3">

Listing 2

</link>

. 

</para>


	

<table id="table1003" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Image_4" effect="bold">

Figure 2

</emphasis>

. Output from the code 
				in Listing 2.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1003" display="block">
1
2
A
B
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1015">
If you compare this output with the original tuple in 

<link id="a1037" target-id="Image_1">

Listing 1

</link>

, or with the 
previous output in 

<link id="a1038" target-id="Image_2">

Figure 1

</link>

, you will see that each of the individual items in 
the tuple 

<emphasis id="em1003" effect="italics">
(in left-to-right order)

</emphasis>
 were assigned respectively to the variables 
named 

<emphasis id="strong1000" effect="bold">
w

</emphasis>
, 

<emphasis id="strong1001" effect="bold">
x

</emphasis>
, 

<emphasis id="strong1002" effect="bold">
y

</emphasis>
, and 

<emphasis id="strong1003" effect="bold">
z

</emphasis>
. 

</para>




<para id="p1016">
Thus, the lines of output produced by printing these four variables in 


<link id="a1039" target-id="Image_4">

Figure 2

</link>

 match the items in the original tuple that was created in 

<link id="a1040" target-id="Image_1">

Listing 1

</link>

 and 
displayed in 

<link id="a1041" target-id="Image_2">

Figure 1

</link>

. 

</para>




</section>
<section id="h21004">
<title>
<emphasis id="Packing_and_unpacking_a_tuple" effect="bold">

Packing and unpacking a tuple

</emphasis>


</title>




<para id="p1017">
Version 3 of


<link id="a1042" url="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">


The Python Tutorial -- 5.3. Tuples and Sequences

</link>

 refers to the first, second, and third statements in 


<link id="a1043" target-id="Image_1">

Listing 1

</link>

 as tuple packing using the following example:

</para>




<quote id="blockquote1000" display="block">
The statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 12345, 54321 and 'hello!' are packed together in a tuple. 
The reverse operation is also possible

</quote>




<para id="p1018">
An early version of


<link id="a1044" url="https://docs.python.org/release/1.5.1p1/tut/tuples.html">

The Python Tutorial -- 5.3 Tuples and Sequences

</link>

 refers to the 
first statement in 

<link id="a1045" target-id="Image_3">

Listing 2

</link>

 as 

<emphasis id="em1004" effect="italics">
tuple unpacking

</emphasis>
.


</para>




<para id="p1019">
The current version of


<link id="a1046" url="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">


The Python Tutorial -- 5.3. Tuples and Sequences

</link>

 

<emphasis id="em1005" effect="italics">
(September 2014)

</emphasis>
 refers to that operation 
more generally as 

<emphasis id="em1006" effect="italics">
sequence unpacking

</emphasis>
.

</para>




<para id="p1020">
That tutorial continues by telling us 

</para>




<quote id="blockquote1001" display="block">
"... sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence." 

</quote>




<para id="p1021">
If you try to run a program that doesn't meet these criteria, you will get 
an error similar to the following:

</para>




<para id="p1022">
<emphasis id="strong1004" effect="bold">
ValueError: too many values to unpack (expected 3)

</emphasis>
</para>





</section>
<section id="h21005">
<title>
<emphasis id="Unpack_the_tuple_into_the_mutable_list" effect="bold">

Unpack the tuple into the mutable list

</emphasis>

 


</title>




<para id="p1023">
Just to make things a little more interesting, I decided to combine the use 
of a tuple 

<emphasis id="em1007" effect="italics">
(an immutable list)

</emphasis>
 and a regular mutable list in this program. 

</para>




<para id="p1024">
<link id="a1047" target-id="Image_5">

Listing 3

</link>

 contains the code to create a mutable list populated with five string 
characters. 

</para>


	

<table id="table1004" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Image_5" effect="bold">

Listing 3

</emphasis>

. Unpack the tuple into the mutable list. 

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1004" display="block">
# Create and print a list
L1 = ["a","b","c","d","e"]

# Unpack tuple into the list and print it
print(L1)
L1[0],L1[1],L1[2],L1[3] = t3
print(L1)
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1025">
Then the list is displayed, as shown by the first line of text in 

<link id="a1048" target-id="Image_6">

Figure 3

</link>

. The first line of output in 


<link id="a1049" target-id="Image_6">

Figure 3

</link>

 shows the contents of the list just after it is created and populated.


</para>


	

<table id="table1005" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Image_6" effect="bold">

Figure 3

</emphasis>

. Output from the code 
				in Listing 3.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1005" display="block">
['a', 'b', 'c', 'd', 'e']
[1, 2, 'A', 'B', 'e']
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1026">
Then the code in 

<link id="a1050" target-id="Image_5">

Listing 3

</link>

 unpacks the four-element tuple referred to by
	

<emphasis id="strong1005" effect="bold">
t3

</emphasis>
 into the first four elements in the list. 

<emphasis id="em1008" effect="italics">
(Remember, a 
list is mutable, so the values of its items can be changed.)

</emphasis>
 

</para>




<para id="p1027">
Then the contents of the list are displayed again producing the second line 
of text in 

<link id="a1051" target-id="Image_6">

Figure 3

</link>

. As you can see from 


<link id="a1052" target-id="Image_6">

Figure 3

</link>

, the first four items in the list were replaced by the four items from the 
tuple. The fifth item in the list was not modified. 

</para>


	
	

</section>
<section id="h21006">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1028">
A complete listing of the program discussed above is provided in 

<link id="a1053" target-id="Image_7">

Listing 4

</link>

.

</para>














	

<table id="table1006" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Image_7" effect="bold">

Listing 4

</emphasis>

. Complete program 
				listing.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">



<code id="pre1006" display="block">
# Illustrates unpacking a tuple
#------------------------------

# Create a pair of tuples
t1 = 1,2
t2 = "A","B"

# Concatenate and print them
t3 = t1 + t2
print(t3)

# Unpack the tuple and print individual elements
w,x,y,z = t3
print(w)
print(x)
print(y)
print(z)

# Create and print a list
L1 = ["a","b","c","d","e"]
# Unpack tuple into the list and print it
print(L1)
L1[0],L1[1],L1[2],L1[3] = t3
print(L1)
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1029">
<link id="a1054" target-id="Image_8">

Figure 4

</link>

 shows the output from the code in 

<link id="a1055" target-id="Image_7">

Listing 4

</link>

.

</para>




	

<table id="table1007" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Image_8" effect="bold">

Figure 4

</emphasis>

. Output from the code 
				in Listing 4.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">



<code id="pre1007" display="block">
(1, 2, 'A', 'B')
1
2
A
B
['a', 'b', 'c', 'd', 'e']
[1, 2, 'A', 'B', 'e']
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






</section>
</section>
<section id="h11005">
<title>
<emphasis id="Visualization_of_the_tuples_in_the_program" effect="bold">

Visualization of the 
tuples in the program

</emphasis>


</title>




<para id="p1030">
<link id="a1056" target-id="Figure_5">

Figure 5

</link>

 shows a visualization of the tuples in the 
program after the first five statements in the code block have been executed. 
This is a case where you need to step through the program and observe changes in 
the diagram on the right to appreciate the behavior of the program.

</para>





<para id="p1031">
<emphasis id="strong1006" effect="bold">
<emphasis id="Figure_5" effect="bold">

Figure 5.

</emphasis>

 Visualization of the tuples in the program.

</emphasis>
</para>




<para id="p1032">
<media id="media1000" alt="Visualization of the tuples in the program." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/1359-1130a.jpg" width="854" height="746"/>
</media>


</para>





</section>
<section id="h11006">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1033">
I encourage you to copy the code from 

<link id="a1057" target-id="Image_7">

Listing 4

</link>

. Execute the code and confirm 
that you get the same results as those shown in 

<link id="a1058" target-id="Image_8">

Figure 4

</link>

. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>




<para id="p1034">
For example, you might want to try the following experiment. There is a line in the program shown in 


<link id="a1059" target-id="Image_7">

Listing 4

</link>

 that reads as follows: 

</para>




<para id="p1035">
<emphasis id="strong1007" effect="bold">
L1 = ["a","b","c","d","e"]

</emphasis>
 

</para>




<para id="p1036">
Modify the program, changing this line so that it reads as follows: 

</para>




<para id="p1037">
<emphasis id="strong1008" effect="bold">
L1 = ("a","b","c","d","e") 

</emphasis>
 

</para>




<para id="p1038">
or

</para>




<para id="p1039">
<emphasis id="strong1009" effect="bold">
L1 = "a","b","c","d","e"

</emphasis>
</para>




<para id="p1040">
By now you should recognize that either of these modifications will change L1 from an ordinary mutable list to a tuple 


<emphasis id="em1009" effect="italics">
(an immutable 
list)

</emphasis>
.

</para>


	


<para id="p1041">
Now execute the modified program. Your output should look something like that shown in 


<link id="a1060" target-id="Image_9">

Figure 6

</link>

. 

</para>


	

<table id="table1008" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Image_9" effect="bold">

Figure 6

</emphasis>

. Output from the 
				modified program.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">



<code id="pre1008" display="block">
(1, 2, 'A', 'B')
1
2
A
B
('a', 'b', 'c', 'd', 'e')
Traceback (most recent call last):
  File "1359-1130-07.py", line 24, in &lt;module&gt;
    L1[0],L1[1],L1[2],L1[3] = t3
TypeError: 'tuple' object does not support item assignment
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1042">
Everything should work well until the attempt is made to unpack the tuple 
named 

<emphasis id="strong1010" effect="bold">
t3

</emphasis>
 and to assign the items from that tuple into the individual items of 
the new tuple named 

<emphasis id="strong1011" effect="bold">
L1

</emphasis>
. 

</para>




<para id="p1043">
The items in a tuple are immutable, meaning that they cannot be changed. 
Therefore, the program crashes at this point with the error shown in 

<link id="a1061" target-id="Image_9">

Figure 6

</link>

.

</para>


	

</section>
<section id="h11007">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1044">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1012" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1008" list-type="bulleted">

					

<item id="li1040">
Module name: Itse1359-1130-Unpacking Tuples

</item>


					

<item id="li1041">
File: Itse1359-1130.htm


</item>


					

<item id="li1042">
Published: 10/19/14

</item>


					

<item id="li1043">
Revised: 01/31/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1013" effect="bold">
Disclaimers:

</emphasis>
<para id="p1045">
<emphasis id="strong1014" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1046">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1047">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1048">
<emphasis id="strong1015" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





<para id="p1049">
-end- 

</para>






</section>
</content>




</document>