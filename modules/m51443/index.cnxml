<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Itse1359-1410-Overview of Python classes</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m51443</md:content-id>
  <md:title>Itse1359-1410-Overview of Python classes</md:title>
  <md:abstract>This is the first of several modules that explain classes and objects in Python. This module provides an overview. Future modules will dig deeper into the details of using classes and objects in Python.</md:abstract>
  <md:uuid>0c8a965e-54da-4a7d-ae6e-71057abaef00</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="What_you_have_learned">

What you have learned

</link>


</item>


		

<item id="li1002">
<link id="a1002" target-id="What_you_will_learn">

What you will learn

</link>


</item>


		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Images">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>



		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1006">
<link id="a1006" target-id="Preview">

Preview

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="General_background_information">

General background information

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1008">
<link id="a1008" target-id="A_class_definition_is_a_blueprint_for_objects">

A class definition is a blueprint for objects

</link>


</item>


		

<item id="li1009">
<link id="a1009" target-id="Three_important_OOP_concepts">

Three important OOP concepts

</link>


<list id="ul1004" list-type="bulleted">

			

<item id="li1010">
<link id="a1010" target-id="What_is_an_ObjectOriented_Program">

What is an Object-Oriented Program? 
			

</link>

 

</item>


			

<item id="li1011">
<link id="a1011" target-id="What_is_encapsulation">

What is encapsulation? 

</link>

 

</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1012">
<link id="a1012" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1005" list-type="bulleted">

		

<item id="li1013">
<link id="a1013" target-id="A_real-world_analogy__a_car_radio">

A real-world analogy -- a car radio

</link>


<list id="ul1006" list-type="bulleted">

			

<item id="li1014">
<link id="a1014" target-id="The_ability_to_store_data">

The ability to store data

</link>


</item>


			

<item id="li1015">
<link id="a1015" target-id="The_user_interface">

The user interface

</link>


</item>


			

<item id="li1016">
<link id="a1016" target-id="Modifying_the_stored_data">

Modifying the stored data

</link>


</item>


			

<item id="li1017">
<link id="a1017" target-id="Responding_to_a_message">

Responding to a message

</link>


</item>


			

<item id="li1018">
<link id="a1018" target-id="Jargon">

Jargon

</link>


</item>


			

<item id="li1019">
<link id="a1019" target-id="Where_do_objects_come_from">

Where do objects come from? 
			

</link>

 

</item>


		

</list>


		

</item>


		

<item id="li1020">
<link id="a1020" target-id="Program_code">

Program code

</link>


<list id="ul1007" list-type="bulleted">

			

<item id="li1021">
<link id="a1021" target-id="Manufacture_a_three-button_radio">

Manufacture a three-button radio

</link>


</item>


			

<item id="li1022">
<link id="a1022" target-id="Scan_for_available_stations">

Scan for available stations

</link>


</item>


			

<item id="li1023">
<link id="a1023" target-id="Program_the_buttons_on_radio01">

Program the buttons on radio01

</link>


</item>


			

<item id="li1024">
<link id="a1024" target-id="Play_the_three_programmed_stations">

Play the three programmed stations

</link>


</item>


			

<item id="li1025">
<link id="a1025" target-id="Manufacture_another_3button_radio">

Manufacture another 3-button radio

</link>


</item>


			

<item id="li1026">
<link id="a1026" target-id="The_class_named_Radio">

The class named Radio

</link>


</item>


			

<item id="li1027">
<link id="a1027" target-id="A_class_variable_named_stations">

A class variable named stations

</link>


</item>


			

<item id="li1028">
<link id="a1028" target-id="The___init___method">

The __init__ method

</link>


</item>


			

<item id="li1029">
<link id="a1029" target-id="The_word_self">

The word self

</link>


</item>


			

<item id="li1030">
<link id="a1030" target-id="Three_more_methods">

Three more methods

</link>


</item>



		

</list>


		

</item>


	

</list>


	

</item>



	

<item id="li1031">
<link id="a1031" target-id="Visualizing_a_class_definition">

Visualizing a class definition

</link>


</item>


	

<item id="li1032">
<link id="a1032" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1033">
<link id="a1033" target-id="Complete_program_listing">

Complete program listing

</link>


</item>



	

<item id="li1034">
<link id="a1034" target-id="Miscellaneous">

Miscellaneous

</link>


</item>





</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1000">
This module is one in a collection of modules on Python designed for 
teaching 

<emphasis id="em1000" effect="italics">
ITSE 1359 Introduction to Scripting Languages: Python

</emphasis>
 at Austin Community 
College in Austin, TX. 

</para>




<section id="h21000">
<title>
<emphasis id="What_you_have_learned" effect="bold">

What you have learned

</emphasis>


</title>




<para id="p1001">
Previous modules have helped you to learn the basics of programming in Python 
such as syntax, numbers, variables, strings, scripts, lists, tuples, 
dictionaries, operators, etc.

</para>




<para id="p1002">
Previous modules have also helped you to learn about control flow including


<emphasis id="strong1000" effect="bold">
if

</emphasis>
 statements, 

<emphasis id="strong1001" effect="bold">
while

</emphasis>
 loops, 

<emphasis id="strong1002" effect="bold">
for

</emphasis>
 
loops, functions, function arguments, etc.

</para>




</section>
<section id="h21001">
<title>
<emphasis id="What_you_will_learn" effect="bold">

What you will learn

</emphasis>


</title>




<para id="p1003">
The time has come for you to learn about 

<emphasis id="em1001" effect="italics">
classes

</emphasis>
 and 

<emphasis id="em1002" effect="italics">
objects

</emphasis>
. This is the 
first of several modules that explain classes and objects in Python.

</para>


	

<para id="p1004">
This module provides an overview. Future modules will dig deeper into the 
	details of using classes and objects.

</para>


	

</section>
<section id="h21002">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1005">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
	and the Listings while you are reading about them.

</para>




<para id="p1006">
<emphasis id="em1003" effect="italics">
(Note to blind and visually impaired students: Most of the Figures and all of the 
Listings in 
this module are presented in plain text format and should be accessible using an 
audio screen reader or a braille display. Note however that the required 
indentation may not be properly represented by an audio screen reader.)

</emphasis>
</para>


	

<section id="h31000">
<title>
<emphasis id="Images" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1008" list-type="bulleted">



<item id="li1035">
<link id="a1035" target-id="Image_3">

Figure 1

</link>

. Output from the code in Listing 2.

</item>




<item id="li1036">
<link id="a1036" target-id="Image_5">

Figure 2

</link>

. Output from the code in Listing 3.

</item>




<item id="li1037">
<link id="a1037" target-id="Image_7">

Figure 3

</link>

. Output from the code in Listing 4.

</item>




<item id="li1038">
<link id="a1038" target-id="Image_9">

Figure 4

</link>

. Output from the code in Listing 5.

</item>


		

<item id="li1039">
<link id="a1039" target-id="Figure_5">

Figure 5

</link>

. Visualizing a class 
		definition.

</item>




<item id="li1040">
<link id="a1040" target-id="Image_14">

Figure 6

</link>

. Output from the program in Listing 9.

</item>


	

</list>




</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1009" list-type="bulleted">



<item id="li1041">
<link id="a1041" target-id="Image_1">

Listing 1

</link>

. Manufacture a three-button radio.

</item>




<item id="li1042">
<link id="a1042" target-id="Image_2">

Listing 2

</link>

. Scan for available stations.

</item>




<item id="li1043">
<link id="a1043" target-id="Image_4">

Listing 3

</link>

. Program the buttons on radio01.

</item>




<item id="li1044">
<link id="a1044" target-id="Image_6">

Listing 4

</link>

. Play the three programmed stations.

</item>




<item id="li1045">
<link id="a1045" target-id="Image_8">

Listing 5

</link>

. Manufacture another 3-button radio.

</item>




<item id="li1046">
<link id="a1046" target-id="Image_10">

Listing 6

</link>

. Beginning of the class named Radio.

</item>




<item id="li1047">
<link id="a1047" target-id="Image_11">

Listing 7

</link>

. The __init__ method.

</item>




<item id="li1048">
<link id="a1048" target-id="Image_12">

Listing 8

</link>

. Three more methods.

</item>




<item id="li1049">
<link id="a1049" target-id="Image_13">

Listing 9

</link>

. Complete program listing.

</item>











</list>




</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>




<para id="p1007">
This module will concentrate primarily on a discussion of the Python class 
and objects created using Python classes.

</para>




<para id="p1008">
In order to relate object-oriented programming to the real world, a car radio will be used to illustrate and discuss several aspects of software objects. For example, you will learn that car radios, as well as software objects, have the ability to store data, along with the ability to modify or manipulate that data.

You will learn that car radios, as well as software objects, have the ability to accept messages and to perform an action, modify their state, return a value, or some combination of the above.

</para>




<para id="p1009">
A simple Python program will be presented and explained to illustrate the definition and use of 
a Python class. This class simulates the manufacture, programming, and use of a car radio. 


</para>




<para id="p1010">
You will see the definition of a class named 

<emphasis id="strong1003" effect="bold">
Radio

</emphasis>
. You will see how to write code that 
simulates pressing the 

<emphasis id="em1004" effect="italics">
scan

</emphasis>
 button on the radio to learn about available 
radio stations in the area. You will see how to write code that simulates the association of a radio button with a particular radio station.

You will see how to write code that simulates the pressing of a radio button to play the radio station associated with that button.



</para>




<para id="p1011">
You will see how to write code to create new 

<emphasis id="strong1004" effect="bold">
Radio

</emphasis>
 objects. You will also see how to save 
these object's reference in reference variables and how to use those variables 
to exercise the 

<emphasis id="strong1005" effect="bold">
Radio

</emphasis>
  objects.

</para>




<para id="p1012">
 You will learn some of the jargon used in OOP, including persistence, state, messages, methods, and behaviors.

You will learn where objects come from, and you will learn that a class is a set of plans that can be used to construct objects. 



</para>




<para id="p1013">
 You will learn that a Python object is an instance of a class. You will see 
Python code, used to create two objects from the same class, and then to send messages to each of 
those objects 

<emphasis id="em1005" effect="italics">
(call methods on objects)

</emphasis>
.

</para>



	

</section>
<section id="h11003">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<section id="h21003">
<title>




<emphasis id="A_class_definition_is_a_blueprint_for_objects" effect="bold">

A class definition is a blueprint 
for objects

</emphasis>


</title>




<para id="p1014">


A class definition is a blueprint 

<emphasis id="em1006" effect="italics">
(set of plans)

</emphasis>
 from which many 
individual objects can be constructed, created, produced, instantiated, or 
whatever verb you prefer to use for building something from a set of plans.

</para>




<para id="p1015">


An object is a programming construct that encapsulates data and the ability to 
manipulate that data in a single software entity.

The blueprint describes the data contained within and the behavior of objects 
instantiated according to the class definition.

</para>




<para id="p1016">


An object's data is contained in variables defined within the class 

<emphasis id="em1007" effect="italics">
(often called member variables, 
instance variables, data members, attributes, fields, properties, etc. )

</emphasis>
. The 
terminology used in the literature often depends on the background of the person writing the 
document.

</para>




<quote id="blockquote1000" display="block">


Note that unlike Java and C++, once a Python object is instantiated, it can be 
modified in ways that no longer follow the blueprint of the class through the 
addition of new data members.

</quote>




<para id="p1017">


An object's behavior is controlled by methods defined within the class.

In Python, methods are functions that are defined within a class definition.

</para>




<para id="p1018">


An object is said to have 

<emphasis id="em1008" effect="italics">
state

</emphasis>
 and 

<emphasis id="em1009" effect="italics">
behavior

</emphasis>
. At any instant in time, the state of an object is determined by the values stored in its variables and its behavior is determined by its methods.

</para>




</section>
<section id="h21004">
<title>




<emphasis id="Three_important_OOP_concepts" effect="bold">

Three important OOP concepts

</emphasis>


</title>




<para id="p1019">


OOP is an abbreviation for Object-Oriented Programming. Most books on OOP will tell you that in order to understand OOP, you need to understand 


<emphasis id="the_following_three_concepts" effect="bold">

the following three concepts

</emphasis>

: 

</para>




<list id="ul1010" list-type="bulleted">

	

<item id="li1050">
Encapsulation
    

</item>


	

<item id="li1051">
Inheritance
    

</item>


	

<item id="li1052">
Polymorphism



</item>




</list>




<para id="p1020">


I will discuss the first two concepts in more detail in this and future modules. As near 
as I can tell, unlike C++ and Java, Python does not support polymorphism, at 
least not in any significant way. 

</para>




<para id="p1021">


C++ 
and Java support two forms of polymorphism:

</para>




<list id="ul1011" list-type="bulleted">

	

<item id="li1053">
Compile-time polymorphism

</item>


	

<item id="li1054">
Runtime polymorphism

</item>




</list>




<para id="p1022">


Both of these depend on the "strongly-typed" nature of C++ and Java. Because 
Python is a "weakly-typed" 

<emphasis id="em1010" effect="italics">
(if typed at all)

</emphasis>
 programming language, I 
don't know how to implement either form of polymorphism using Python. 

<emphasis id="em1011" effect="italics">

(However, if I am wrong on this, please let me know and I will be happy to learn 
how to implement polymorphism in Python.)

</emphasis>
</para>




<para id="p1023">


Generally, speaking, the concepts in the


<link id="a1050" target-id="the_following_three_concepts">

above list

</link>

 increase in difficulty going down the list from top to bottom. Therefore, I will begin with 
encapsulation and work my way down the list in successive modules.

</para>


	

<section id="h31002">
<title>
 

<emphasis id="What_is_an_ObjectOriented_Program" effect="bold">

What is an Object-Oriented Program

</emphasis>

?



</title>




<para id="p1024">
 Many authors would answer this question something like the following:



</para>




<quote id="blockquote1001" display="block">
 An Object-Oriented Program consists of a group of cooperating objects, exchanging messages, for the purpose of achieving a common objective.



</quote>




</section>
<section id="h31003">
<title>
 

<emphasis id="What_is_an_object" effect="bold">

What is an object

</emphasis>

?



</title>




<para id="p1025">
 An object is a software construct that encapsulates data, along with the ability to use or modify that data.



</para>




</section>
<section id="h31004">
<title>
 

<emphasis id="What_is_encapsulation" effect="bold">

What is encapsulation

</emphasis>

?



</title>




<para id="p1026">
 An interesting description of encapsulation was provided in an article by Rocky Lhotka regarding VB.NET. That description reads as follows:



</para>




<quote id="blockquote1002" display="block">
 "Encapsulation is the concept that an object should totally separate its interface from its implementation. All the data and implementation code for an object should be entirely hidden behind its interface.

The idea is that we can create an interface (Public methods in a class) and, as long as that interface remains consistent, the application can interact with our objects. This remains true even if we entirely rewrite the code within a given method thus the interface is independent of the implementation."



</quote>




<para id="p1027">
 I like this description, so I won't try to improve on it. I do need to point out that according to


<link id="a1051" url="https://docs.python.org/3/tutorial/classes.html#random-remarks">

The 
Python Tutorial

</link>

, 



</para>


	

<quote id="blockquote1003" display="block">
"In fact, nothing in Python makes it possible to enforce 
data hiding -- it is all based upon convention." 

</quote>


	

<para id="p1028">
Within that restriction, it is 
still possible to approximate encapsulation as described by Lhotka using Python 
	provided that appropriate conventions are adhered to.

</para>



	
	

</section>
</section>
</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	


<section id="h21005">
<title>
 

<emphasis id="A_real-world_analogy__a_car_radio" effect="bold">

A real-world analogy -- a car 
radio

</emphasis>


</title>




<para id="p1029">
 Abstract concepts, such as the concept of an object or encapsulation, can often be best understood by comparing them to real-world analogies. One imperfect, but fairly good analogy to a software object is the radio in your car.



</para>




<section id="h31005">
<title>
 

<emphasis id="The_ability_to_store_data" effect="bold">

The ability to store data

</emphasis>


</title>




<para id="p1030">
 Your car radio probably has the ability to store data, and to allow you to use and modify that data at will. 


<emphasis id="em1012" effect="italics">
(However, you can only use and modify that data through use of the human interface that is provided by the manufacturer of the radio.)

</emphasis>


The data that can be stored in your car radio probably includes a list of five or more frequencies that correspond to your favorite radio stations.

</para>




<quote id="blockquote1004" display="block">
 Most modern car radios are much more complex than the one that we 
will use as an analogy in this module.

</quote>




</section>
<section id="h31006">
<title>
 

<emphasis id="The_user_interface" effect="bold">

The user interface

</emphasis>


</title>




<para id="p1031">
 The radio provides a mechanism 

<emphasis id="em1013" effect="italics">
(user interface)

</emphasis>
 that allows you to use the data stored therein.

When you press one of the station-selector buttons on the front of the radio, the radio automatically tunes itself to the frequency corresponding to that button. 


<emphasis id="em1014" effect="italics">
(In this case, you, the user, are sending a message to the radio object asking it to perform a particular action.)

</emphasis>


If you have previously stored a favorite radio station frequency in the storage location corresponding to that button, pressing the button 


<emphasis id="em1015" effect="italics">
(sending the message)

</emphasis>
 will cause the radio station transmitting at that frequency to be heard through the radio's speakers.



</para>




<para id="p1032">
 If you have not previously stored a favorite frequency in the storage location corresponding to that button, you will probably only hear static. 


<emphasis id="em1016" effect="italics">
(That doesn't mean that the radio object failed to respond correctly to the message. It simply means that its response was based on bad data.)

</emphasis>
 

</para>




</section>
<section id="h31007">
<title>
 

<emphasis id="Modifying_the_stored_data" effect="bold">

Modifying the stored data

</emphasis>


</title>




<para id="p1033">
 The human interface also makes it possible for you to store or modify those five or more frequency values. This is done in different ways for different radios. On my car radio, the procedure is:

    

</para>




<list id="ul1012" list-type="bulleted">

	

<item id="li1055">
Manually tune the radio to the desired frequency
    

</item>


	

<item id="li1056">
Press one of the buttons and hold it down for several seconds.



</item>




</list>




<para id="p1034">
 When the radio beeps, I know that the new frequency value has been stored in a storage location that corresponds to that particular button.



</para>




<para id="p1035">
 What I have done in this process is to send a message to the radio object asking it to 

<emphasis id="em1017" effect="italics">
change its state

</emphasis>
. The beep that I hear could be interpreted as the radio object returning a value back to me indicating that the mission has been accomplished. 


<emphasis id="em1018" effect="italics">
(Alternately, we might say that the radio object sent a message back to me.)

</emphasis>
 

</para>




</section>
<section id="h31008">
<title>
 

<emphasis id="Responding_to_a_message" effect="bold">

Responding to a message

</emphasis>


</title>




<para id="p1036">
 We say that an object has changed its state when one or more data values stored in the object have been modified.

We also say that when an object responds to a message, it will usually 

</para>




<list id="ul1013" list-type="bulleted">

	

<item id="li1057">
perform an action, 

</item>


	

<item id="li1058">
change its state, 

</item>


	

<item id="li1059">
return a value, or 

</item>


	

<item id="li1060">
some combination of the above. 

</item>




</list>




<para id="p1037">
 After following this procedure to program a button, when I press that button 

<emphasis id="em1019" effect="italics">
(send a message)

</emphasis>
, the radio object will automatically 
tune itself to that frequency. 

</para>




<para id="p1038">
 I live in Austin, TX. If I drive to Dallas and press a button that I have associated with a particular radio station in Austin, I will probably hear static. In that case, I may want to change the frequency value associated with that button. I can follow the same procedure described earlier to 


<emphasis id="em1020" effect="italics">
set the frequency value

</emphasis>
 associated with that button to correspond to one of the radio stations in Dallas. 


<emphasis id="em1021" effect="italics">
(Again, I would be sending a message to the radio object asking it to change its state.)

</emphasis>
 

</para>




</section>
<section id="h31009">
<title>
 

<emphasis id="Jargon" effect="bold">

Jargon

</emphasis>


</title>




<para id="p1039">
 As you can see from the above discussion, the world of OOP is awash with jargon, and the ability to translate the jargon is essential to an understanding of the published material on OOP. Therefore, as we progress through this series of modules, I will introduce you to some of that jargon and try to help you understand the meaning of the jargon.



</para>




<section id="h41000">
<title>
 Persistence

</title>




<para id="p1040">
 The ability of your car radio to remember your list of favorite stations is often referred to as persistence. An object that has the ability to store and remember values is often said to have persistence.



</para>




</section>
<section id="h41001">
<title>
 State

</title>




<para id="p1041">
 It is often said that the state of an object at a particular point in time is determined by the values stored in the object. In our analogy, even if we own identical radios, unless the two of us have the same list of favorite radio stations, associated with the same combination of buttons, the state of your radio object at any particular point in time will be different from the state of my radio object. 

</para>




<para id="p1042">
 It is perfectly OK for the two of us to own identical radios and to cause the two radio objects to contain the same list of frequencies. Even if two objects have the same state at the same time, they are still separate and distinct objects. While this is obvious in the real world of car radios, it may not be quite as obvious in the virtual world of computer programming.



</para>




</section>
<section id="h41002">
<title>
 Sending a message

</title>




<para id="p1043">
 A person who speaks in OOP-speak might say that pressing one of the 
station-selector buttons on the front of the radio sends a message to the radio object, asking it to perform an action 


<emphasis id="em1022" effect="italics">
(tune to a particular station)

</emphasis>
. That person might also say that storing a new frequency that corresponds to a particular button entails sending a message to the radio object asking it to change its state.



</para>




</section>
<section id="h41003">
<title>
 Calling a method 



</title>




<para id="p1044">
 Python-speak is a little more specific than general OOP-speak. In 
Python-speak, we might say that pressing one of the selector buttons on the front of the radio calls a method on the radio object. The behavior of the method is to cause the object to perform an action.



</para>




<para id="p1045">
 As a practical matter, the physical manifestation of sending a message to an object in 
Python is to cause that object to execute one of its methods.



</para>




</section>
<section id="h41004">
<title>
 Setter methods and getter methods

</title>




<para id="p1046">
 Similarly, we might say that storing a new frequency that corresponds to a particular button 
calls a 


<emphasis id="em1023" effect="italics">
setter

</emphasis>
 method on the radio object.



<emphasis id="em1024" effect="italics">
(In an earlier paragraph, I said that I could follow a specific procedure to set the frequency value associated with a button to correspond to one of the radio stations in Dallas. Note the use of the words set and setter in this jargon.)

</emphasis>
 

</para>




</section>
<section id="h41005">
<title>
 Behavior of an object

</title>




<para id="p1047">
 In addition to state, objects are often also said to have behavior. The overall behavior of an object is determined by the combined behaviors of its individual methods.

For example, one of the behaviors exhibited by our radio object is the ability to play the radio station at a particular frequency. When a frequency is selected by pressing a selector button, the radio knows how to translate the radio waves at that frequency into audio waves compatible with our range of hearing, and to send those audio waves out through the speakers.

Thus, the radio object behaves in a specific way in response to a message asking it to tune to a particular frequency.



</para>




</section>
</section>
<section id="h31010">
<title>
 

<emphasis id="Where_do_objects_come_from" effect="bold">

Where do objects come from

</emphasis>

?



</title>




<para id="p1048">
 In order to mass-produce car radios, someone must first create a set of 
manufacturing plans


<emphasis id="em1025" effect="italics">
(drawings, or blueprints)

</emphasis>
 for the radio. Once the plans are available, the manufacturing people can produce millions of nearly identical radios.



</para>




<section id="h41006">
<title>
 A Python class definition is a set of plans



</title>




<para id="p1049">
 The same is true for software objects. In order to create a software object in 
Python, it is necessary for someone to first create a plan.

In Python, we refer to that plan as a 

<emphasis id="strong1006" effect="bold">
<emphasis id="em1026" effect="italics">
class

</emphasis>
</emphasis>
.

The class is defined by a Python programmer. Once the class definition is available, that programmer


<emphasis id="em1027" effect="italics">
(or other programmers)

</emphasis>
, can use it to produce large numbers of nearly identical objects.

</para>




</section>
<section id="h41007">
<title>
 An instance of a class



</title>




<para id="p1050">
 If we were standing at the output end of the factory that produces car radios, we might pick up a new radio and say that it is an instance of the plans used to produce the radio. 


<emphasis id="em1028" effect="italics">
(Unless they were object-oriented programmers, the people around us might think we were a little odd when they hear us say that.)

</emphasis>


However, it is common jargon to refer to a software object as an instance of a class.



</para>




</section>
<section id="h41008">
<title>
 To instantiate an object



</title>




<para id="p1051">
 Furthermore, somewhere along the way, someone turned the word instance into a verb, and it is also common jargon to say that when creating a new object, we are 


<emphasis id="em1029" effect="italics">
instantiating

</emphasis>
 an object. 

</para>




</section>
</section>
</section>
<section id="h21006">
<title>
 

<emphasis id="Program_code" effect="bold">

Program code

</emphasis>


</title>




<para id="p1052">
 As mentioned above, I will explain a program that uses the analogy of a 
car radio to illustrate several aspects of Python classes and objects.

</para>




<para id="p1053">
 I will explain this program in fragments. A complete listing of the program 
is provided in 

<link id="a1052" target-id="Image_13">

Listing 9

</link>

 near the end of the module. The output from running 
the program is shown in 

<link id="a1053" target-id="Image_14">

Figure 6

</link>

. Because this is an 
overview module, this explanation will gloss over various details. I will 
revisit and explain many of those details in future modules.

</para>




<section id="h31011">
<title>
 

<emphasis id="Manufacture_a_three-button_radio" effect="bold">

Manufacture a three-button radio

</emphasis>


</title>




<para id="p1054">
 As you will see if you examine 

<link id="a1054" target-id="Image_13">

Listing 9

</link>

, this program defines a class 
named 

<emphasis id="strong1007" effect="bold">
Radio

</emphasis>
. That class can be used to create objects that 
simulate car radios having 
three station-selector buttons and a scan button. I will explain that class 
later. First I will explain how to use the class.

</para>




<para id="p1055">
 

<link id="a1055" target-id="Image_1">

Listing 1

</link>

 shows the code necessary to create 

<emphasis id="em1030" effect="italics">
(instantiate)

</emphasis>
 a single 
instance of the 

<emphasis id="strong1008" effect="bold">
Radio

</emphasis>
 class and to store that object's 
reference in a variable named 

<emphasis id="strong1009" effect="bold">
radio01

</emphasis>
. 

<emphasis id="em1031" effect="italics">
(In OOP jargon we 
say that an object is an instance of a class.)

</emphasis>
 This simulates the 
manufacturing of the radio and the installation of the radio in a car.

</para>

 
	

<table id="table1000" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Image_1" effect="bold">

Listing 1

</emphasis>

. Manufacture a 
				three-button radio.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">




<code id="pre1000" display="block">
#Manufacture a 3-button radio

radio01 = Radio()

</code>





				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1056">
As a practical matter, the code required to instantiate a Python object 
	looks just like the code required to call a function having the same name as 
	the class from which the object is being instantiated. In my opinion, this 
	causes Python to be a little less readable than Java, which uses a special 
	syntax to create an object.

</para>




</section>
<section id="h31012">
<title>
<emphasis id="Scan_for_available_stations" effect="bold">

Scan for available stations

</emphasis>


</title>




<para id="p1057">
Next we want to program the station-selector buttons to cause our favorite 
radio stations to be played when we press a button. First, however, we will 
simulate pressing the 

<emphasis id="em1032" effect="italics">
scan

</emphasis>
 button on the radio to learn about the 
stations that are available in the area.

</para>




<para id="p1058">
<link id="a1056" target-id="Image_2">

Listing 2

</link>

 uses the reference variable named 

<emphasis id="strong1010" effect="bold">
radio01

</emphasis>
 to 


<emphasis id="em1033" effect="italics">
call a 
method

</emphasis>
 named 

<emphasis id="strong1011" effect="bold">
scan

</emphasis>
 belonging to the object referred to by


<emphasis id="strong1012" effect="bold">
radio01

</emphasis>
. As you will see later when we examine the class 
definition, the 

<emphasis id="strong1013" effect="bold">
scan

</emphasis>
 method requires the name of the city as an 
incoming parameter and returns a reference to a dictionary that relates 
frequencies to radio station call signs in that city. The returned reference is 
stored in the variable named 

<emphasis id="strong1014" effect="bold">
radio01Stations

</emphasis>
.

</para>




<para id="p1059">
The dictionary is printed in 

<link id="a1057" target-id="Image_2">

Listing 2

</link>

 producing the 
output shown in 

<link id="a1058" target-id="Image_3">

Figure 1

</link>

.

</para>


	

<table id="table1001" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Image_2" effect="bold">

Listing 2

</emphasis>

. Scan for available 
				stations.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">




<code id="pre1001" display="block">

#Program the three buttons labeled 1, 2, and 3
#First scan for available stations
radio01Stations = radio01.scan("Austin")
print("Available stations in Austin")
print(radio01Stations)


</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1060">
As mentioned above, 

<link id="a1059" target-id="Image_3">

Figure 1

</link>

 shows the output produced by the code in 

<link id="a1060" target-id="Image_2">


	Listing 2

</link>

.

</para>




	

<table id="table1002" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Image_3" effect="bold">

Figure 1

</emphasis>

. Output from the code 
				in Listing 2.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">




<code id="pre1002" display="block">
Available stations in Austin
{93.7: 'KLBJ', 91.7: 'KVRX', 98.1: 'KVET', 95.5: 'KKMJ'}
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31013">
<title>
<emphasis id="Program_the_buttons_on_radio01" effect="bold">

Program the buttons on radio01

</emphasis>


</title>




<para id="p1061">
This program simulates a radio having three station-selector buttons. The 
code in 

<link id="a1061" target-id="Image_4">

Listing 3

</link>

 uses the object's reference stored in 

<emphasis id="strong1015" effect="bold">
radio01

</emphasis>
 to call a method 
named 

<emphasis id="strong1016" effect="bold">
setStationNumber

</emphasis>
 three times in succession on the object to program each of the three buttons to 
the frequencies shown. 

<emphasis id="em1034" effect="italics">
(Note that the buttons are numbered 1, 2, and 3 
instead of 0, 1, and 2.)

</emphasis>
</para>




	

<table id="table1003" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Image_4" effect="bold">

Listing 3

</emphasis>

. Program the buttons 
				on radio01.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">




<code id="pre1003" display="block">
print("Program the buttons")
radio01.setStationNumber(1,radio01Stations[91.7])
radio01.setStationNumber(2,radio01Stations[95.5])
radio01.setStationNumber(3,radio01Stations[98.1])

</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1062">
The output produced by the code in 

<link id="a1062" target-id="Image_4">

Listing 3

</link>

 is shown in 

<link id="a1063" target-id="Image_5">


	Figure 2

</link>

.

</para>




	

<table id="table1004" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Image_5" effect="bold">

Figure 2

</emphasis>

. Output from the code 
				in Listing 3.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">




<code id="pre1004" display="block">
Program the buttons
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31014">
<title>
<emphasis id="Play_the_three_programmed_stations" effect="bold">

Play the three programmed 
	stations

</emphasis>


</title>




<para id="p1063">
Now that our favorite radio stations in the local area 

<emphasis id="em1035" effect="italics">
(Austin)

</emphasis>
 
have been programmed into the buttons, we can play any of the three stations 
simply by turning the radio on and pressing a station-selector button.

</para>




<para id="p1064">
<link id="a1064" target-id="Image_6">

Listing 4

</link>

 calls the 

<emphasis id="strong1017" effect="bold">
playStation

</emphasis>
 method three times in succession 
on the 

<emphasis id="strong1018" effect="bold">
radio01

</emphasis>
 object to simulate 
pressing each of the three buttons. This program doesn't actually produce sound. 
Instead, it simulates playing a radio station by printing a message identifying 
the call sign of the station being played. 

</para>


	

<table id="table1005" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Image_6" effect="bold">

Listing 4

</emphasis>

. Play the three programmed stations.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">




<code id="pre1005" display="block">
print("Play the three programmed stations")
radio01.playStation(3)
radio01.playStation(2)
radio01.playStation(1)

</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1065">
<link id="a1065" target-id="Image_7">

Figure 3

</link>

 shows the output produced by the code in 

<link id="a1066" target-id="Image_6">


	Listing 4

</link>

.

</para>













	

<table id="table1006" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Image_7" effect="bold">

Figure 3

</emphasis>

. Output from the code 
				in Listing 4.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">




<code id="pre1006" display="block">
Play the three programmed stations
Playing KVET
Playing KKMJ
Playing KVRX
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31015">
<title>
<emphasis id="Manufacture_another_3button_radio" effect="bold">

Manufacture another 3-button 
	radio

</emphasis>


</title>




<para id="p1066">
As I explained earlier, once a class definition is available, it can be used 
to instantiate any number of objects. This is illustrated in 

<link id="a1067" target-id="Image_8">


Listing 5

</link>

, which 
simulates the manufacturing, programming, and playing of a different radio 
object.

</para>




<para id="p1067">
As you can see in 

<link id="a1068" target-id="Image_8">

Listing 5

</link>

, the buttons on this radio 
are programmed for stations in Dallas suggesting the owner of this radio lives 
in Dallas.

</para>




	

<table id="table1007" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Image_8" effect="bold">

Listing 5

</emphasis>

. Manufacture another 
				3-button radio.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">




<code id="pre1007" display="block">
#Manufacture another 3-button radio
radio02 = Radio()

#Program the three buttons labeled 1, 2, and 3
#First scan for available stations
radio02Stations = radio02.scan("Dallas")
print("Available stations in Dallas")
print(radio02Stations)

print("Program the buttons")
radio02.setStationNumber(1,radio02Stations[91.7])
radio02.setStationNumber(2,radio02Stations[97.9])
radio02.setStationNumber(3,radio02Stations[98.3])

print("Play the three programmed stations")
radio02.playStation(3)
radio02.playStation(2)
radio02.playStation(1)
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1068">
<link id="a1069" target-id="Image_9">

Figure 4

</link>

 shows the output produced by the code in 

<link id="a1070" target-id="Image_8">


	Listing 5

</link>

.

</para>




	

<table id="table1008" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Image_9" effect="bold">

Figure 4

</emphasis>

. Output from the code 
				in Listing 5.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">




<code id="pre1008" display="block">
Available stations in Dallas
{98.3: 'KNON', 98.7: 'KLUV', 91.7: 'KKXT', 97.9: 'KBFB'}
Program the buttons
Play the three programmed stations
Playing KNON
Playing KBFB
Playing KKXT
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31016">
<title>
<emphasis id="The_class_named_Radio" effect="bold">

The class named Radio

</emphasis>


</title>




<para id="p1069">
The definition of the class named 

<emphasis id="strong1019" effect="bold">
Radio

</emphasis>
 begins in 

<link id="a1071" target-id="Image_10">


Listing 6

</link>

. 
The first line of code in a class definition consists of the keyword class 
followed by the name of the class. This is followed by the name of another class 
in parentheses, which I will explain in a future module on 

<emphasis id="em1036" effect="italics">
class inheritance

</emphasis>
. 
As is common in Python, the closing parenthesis is followed by a colon (:) 
character. The colon is followed by the indented class body.

</para>




	

<table id="table1009" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Image_10" effect="bold">

Listing 6

</emphasis>

. Beginning of the 
				class named Radio.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">




<code id="pre1009" display="block">
class Radio(object):
    #This class provides the plans from which the radio objects are built.
    stations = {"Austin":{91.7:"KVRX",95.5:"KKMJ",98.1:"KVET",93.7:"KLBJ"},
                "Dallas":{98.3:"KNON",91.7:"KKXT",97.9:"KBFB",98.7:"KLUV"}
               }
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h31017">
<title>
<emphasis id="A_class_variable_named_stations" effect="bold">

A class variable named 
	stations

</emphasis>


</title>




<para id="p1070">
The class body in 

<link id="a1072" target-id="Image_10">

Listing 6

</link>

 begins with a variable named 

<emphasis id="strong1020" effect="bold">
stations

</emphasis>
 
	that references a dictionary object. The dictionary object contains two 
	nested dictionary objects. One of the nested objects provides information 
	about radio stations in Austin. The other nested object provides information 
	about radio stations in Dallas. This is the source of the radio call 
sign information for Austin and Dallas shown in 

<link id="a1073" target-id="Image_7">

Figure 3

</link>

 
and 

<link id="a1074" target-id="Image_9">

Figure 4

</link>

.

</para>




<quote id="blockquote1005" display="block">
IMPORTANT: According to 


<link id="a1075" url="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables">

The Python Tutorial -- 
	Class and Instance Variables

</link>

, the variable named 

<emphasis id="strong1021" effect="bold">
stations

</emphasis>
 is a 

<emphasis id="em1037" effect="italics">
class 
	variable

</emphasis>
 that is shared by all instances 

<emphasis id="em1038" effect="italics">
(objects)

</emphasis>
 of the class. 
I will have more to say about 

<emphasis id="em1039" effect="italics">
class variables

</emphasis>
 and 

<emphasis id="em1040" effect="italics">
instance 
variables

</emphasis>
 in a future module.

</quote>




</section>
<section id="h31018">
<title>
<emphasis id="The___init___method" effect="bold">

The __init__ method

</emphasis>


</title>




<para id="p1071">
As I mentioned earlier, when a function is defined inside of a class 
definition, it is called a method. 

<link id="a1076" target-id="Image_11">

Listing 7

</link>

 defines a special method named


<emphasis id="strong1022" effect="bold">
__init__

</emphasis>
. 

<emphasis id="em1041" effect="italics">
(Note that two underscore characters are required 
on each side of the word 

<emphasis id="strong1023" effect="bold">
init

</emphasis>
.)

</emphasis>
</para>




	

<table id="table1010" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Image_11" effect="bold">

Listing 7

</emphasis>

. The __init__ 
				method.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">




<code id="pre1010" display="block">
    def __init__(self):
        self.stationNumber = [0,0,0]

</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>






<para id="p1072">
According to


<link id="a1077" url="https://docs.python.org/3/tutorial/classes.html#class-objects">

The 
Python Tutorial -- Class Objects

</link>

,

</para>




<quote id="blockquote1006" display="block">
"When a class defines an __init__() method, class instantiation automatically invokes __init__() for the newly-created class instance."

</quote>




<para id="p1073">
Thus, the 

<emphasis id="strong1024" effect="bold">
__init__

</emphasis>
 method can be used to initialize various aspects of a new 
object when it is instantiated. 

<emphasis id="em1042" effect="italics">
(This is roughly analogous to the 
constructor in other OO languages.)

</emphasis>
</para>




<para id="p1074">
The code inside the 

<emphasis id="strong1025" effect="bold">
__init__

</emphasis>
 method in 

<link id="a1078" target-id="Image_11">


Listing 7

</link>

 creates a new variable named


<emphasis id="strong1026" effect="bold">
stationNumber

</emphasis>
 and initializes it to refer to a three-element list. 

</para>




<quote id="blockquote1007" display="block">
According to 


<link id="a1079" url="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables">

The Python Tutorial -- 
	Class and Instance Variables

</link>

, variables that are created in this manner 


<emphasis id="em1043" effect="italics">
(inside class methods)

</emphasis>
 are called 

<emphasis id="em1044" effect="italics">
instance variables

</emphasis>
 and are 


<emphasis id="em1045" effect="italics">
"for data unique to each instance
(object)."

</emphasis>
</quote>




<para id="p1075">
Therefore, the variable named 

<emphasis id="strong1027" effect="bold">
stations

</emphasis>
 from 

<link id="a1080" target-id="Image_10">


Listing 6

</link>

 is 
shared among 

<emphasis id="strong1028" effect="bold">
radio01

</emphasis>
 and 

<emphasis id="strong1029" effect="bold">
radio02

</emphasis>
 in


<link id="a1081" target-id="Image_13">

Listing 9

</link>

. 
However, 

<emphasis id="strong1030" effect="bold">
radio01

</emphasis>
 and 

<emphasis id="strong1031" effect="bold">
radio02

</emphasis>
 each has its own 
copy of the variable named 

<emphasis id="strong1032" effect="bold">
stationNumber

</emphasis>
 from 

<link id="a1082" target-id="Image_11">


Listing 7

</link>

 and 
those variables are not shared among objects.

</para>




</section>
<section id="h31019">
<title>
<emphasis id="The_word_self" effect="bold">

The word self

</emphasis>


</title>




<para id="p1076">
Note the use of the word 

<emphasis id="strong1033" effect="bold">
self

</emphasis>
 in two locations in 

<link id="a1083" target-id="Image_11">


Listing 7

</link>

. 
I will explain the use of the 
word 

<emphasis id="strong1034" effect="bold">
self

</emphasis>
 in class definitions in a future module.

</para>




</section>
<section id="h31020">
<title>
<emphasis id="Three_more_methods" effect="bold">

Three more methods

</emphasis>


</title>




<para id="p1077">
<link id="a1084" target-id="Image_12">

Listing 8

</link>

 defines three more methods. Except for the use of the word 

<emphasis id="strong1035" effect="bold">

self

</emphasis>
, there is nothing unusual about the code in these methods.

</para>













	

<table id="table1011" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1011">

			

<row id="tr1022">

				

<entry id="th1011">
<emphasis id="Image_12" effect="bold">

Listing 8

</emphasis>

. Three more 
				methods.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1011">

			

<row id="tr1023">

				

<entry id="td1011">




<code id="pre1011" display="block">
    def scan(self,city):
        return self.stations[city]

    def setStationNumber(self,index,station):
        self.stationNumber[index-1] = station

    def playStation(self,index):
         print("Playing " + self.stationNumber[index-1])
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<section id="h41009">
<title>
<emphasis id="The_scan_method" effect="bold">

The scan method

</emphasis>


</title>




<para id="p1078">
The purpose of the method named 

<emphasis id="strong1036" effect="bold">
scan

</emphasis>
 is to simulate pressing 
the 

<emphasis id="em1046" effect="italics">
scan

</emphasis>
 button on the radio. This method is called on the 

<emphasis id="strong1037" effect="bold">

Radio

</emphasis>
 object referred to by 

<emphasis id="strong1038" effect="bold">
radio01

</emphasis>
 in 

<link id="a1085" target-id="Image_2">


Listing 2

</link>

. It 
returns a reference to one of the nested dictionary objects in the 

<emphasis id="strong1039" effect="bold">

stations

</emphasis>
 dictionary object.

</para>




<para id="p1079">
It is called again on a different 

<emphasis id="strong1040" effect="bold">
Radio

</emphasis>
 object referred to 
by 

<emphasis id="strong1041" effect="bold">
radio02

</emphasis>
 in 

<link id="a1086" target-id="Image_8">

Listing 5

</link>

. It is important to note that even though 
both objects were instantiated from the same 

<emphasis id="strong1042" effect="bold">
Radio

</emphasis>
 class, they 
are different objects. The only things they share are the 

<emphasis id="strong1043" effect="bold">
stations

</emphasis>
 
variable, their ancestry, and their overall structure.

</para>




<quote id="blockquote1008" display="block">
<emphasis id="em1047" effect="italics">
The analogy to a physical car radio breaks down with respect to 
the class variable named 

<emphasis id="strong1044" effect="bold">
stations

</emphasis>
. Physical car radios don't 
share any data. You could say that data stored in physical car radios is stored 
in instance variables only.

</emphasis>
</quote>




</section>
<section id="h41010">
<title>
<emphasis id="The_setStationNumber_method" effect="bold">

The setStationNumber method

</emphasis>


</title>




<para id="p1080">
The purpose of the 

<emphasis id="strong1045" effect="bold">
setStationNumber

</emphasis>
 method is to simulate 
programming the station-selector buttons on a 

<emphasis id="strong1046" effect="bold">
Radio

</emphasis>
 object. It 
is called three times, once for each button, on the object referred to by


<emphasis id="strong1047" effect="bold">
radio01

</emphasis>
 in 

<link id="a1087" target-id="Image_4">

Listing 3

</link>

. It is also called three times on the 
different 

<emphasis id="strong1048" effect="bold">
Radio

</emphasis>
 object referred to by 

<emphasis id="strong1049" effect="bold">
radio02

</emphasis>
 
in 

<link id="a1088" target-id="Image_8">

Listing 5

</link>

.

</para>




</section>
<section id="h41011">
<title>
<emphasis id="The_playStation_method" effect="bold">

The playStation method

</emphasis>


</title>




<para id="p1081">
The purpose of the 

<emphasis id="strong1050" effect="bold">
playStation

</emphasis>
 method is to simulate 
pressing a station-selector button on the radio to play the radio station that 
has been programmed into that button. It is called three times on the 

<emphasis id="strong1051" effect="bold">

Radio

</emphasis>
 object referred to by 

<emphasis id="strong1052" effect="bold">
radio01

</emphasis>
 in 

<link id="a1089" target-id="Image_6">


Listing 4

</link>

. It is 
also called three times on the different 

<emphasis id="strong1053" effect="bold">
Radio

</emphasis>
 object referred 
to by 

<emphasis id="strong1054" effect="bold">
radio02

</emphasis>
 in 

<link id="a1090" target-id="Image_8">

Listing 5

</link>

.

</para>




</section>
</section>
</section>
</section>
<section id="h11005">
<title>
<emphasis id="Visualizing_a_class_definition" effect="bold">

Visualizing a class definition

</emphasis>


</title>




<para id="p1082">
<link id="a1091" target-id="Figure_5">

Figure 5

</link>

 shows a


<link id="a1092" url="http://pythontutor.com/visualize.html#mode=display">

visualization

</link>

 
of the class definition in 

<link id="a1093" target-id="Image_13">

Listing 9

</link>

. 

</para>





<para id="p1083">
<emphasis id="strong1055" effect="bold">
<emphasis id="Figure_5" effect="bold">

Figure 5.

</emphasis>

 Visualizing a class definition.

</emphasis>
</para>




<para id="p1084">
<media id="media1000" alt="Visualization of a class definition." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/1359-1410a.jpg" width="800" height="458"/>
</media>


</para>





<para id="p1085">
I recommend that you create a


<link id="a1094" url="http://pythontutor.com/visualize.html#mode=display">


visualization

</link>

 for the code in 

<link id="a1095" target-id="Image_13">

Listing 9

</link>

 and step 
through the program one instruction at a time. As you do that, pay attention to 
the movements of the red and green arrows on the left, the diagram on the right, 
and the printed material at the bottom. That should help you to better 
understand the concept of classes and objects in Python.

</para>






</section>
<section id="h11006">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1086">
I also encourage you to copy the code from 

<link id="a1096" target-id="Image_13">

Listing 9

</link>

. Execute the code and confirm 
that you get the same results as those shown in 

<link id="a1097" target-id="Image_14">

Figure 6

</link>

. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>




</section>
<section id="h11007">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1087">
A complete listing of the program is provided in 

<link id="a1098" target-id="Image_13">

Listing 
9

</link>

 below.

</para>





<para id="p1088">
<emphasis id="strong1056" effect="bold">
<emphasis id="Image_13" effect="bold">

Listing 9

</emphasis>

. Complete program 
				listing.

</emphasis>
</para>






<code id="pre1012" display="block">
# This program simulates the manufacture, programming, and use of a pair of
# three-button car radios.
#
#--------------------------------------------------------------------------
class Radio(object):
    #This class provides the plans from which the radio objects are built.
    stations = {"Austin":{91.7:"KVRX",95.5:"KKMJ",98.1:"KVET",93.7:"KLBJ"},
                "Dallas":{98.3:"KNON",91.7:"KKXT",97.9:"KBFB",98.7:"KLUV"}
               }

    def __init__(self):
        self.stationNumber = [0,0,0]

    def scan(self,city):
        return self.stations[city]

    def setStationNumber(self,index,station):
        self.stationNumber[index-1] = station

    def playStation(self,index):
        print("Playing " + self.stationNumber[index-1])
        
#Manufacture a 3-button radio
radio01 = Radio()

#Program the three buttons labeled 1, 2, and 3
#First scan for available stations
radio01Stations = radio01.scan("Austin")
print("Available stations in Austin")
print(radio01Stations)

print("Program the buttons")
radio01.setStationNumber(1,radio01Stations[91.7])
radio01.setStationNumber(2,radio01Stations[95.5])
radio01.setStationNumber(3,radio01Stations[98.1])

print("Play the three programmed stations")
radio01.playStation(3)
radio01.playStation(2)
radio01.playStation(1)



#Manufacture another 3-button radio
radio02 = Radio()

#Program the three buttons labeled 1, 2, and 3
#First scan for available stations
radio02Stations = radio02.scan("Dallas")
print("Available stations in Dallas")
print(radio02Stations)

print("Program the buttons")
radio02.setStationNumber(1,radio02Stations[91.7])
radio02.setStationNumber(2,radio02Stations[97.9])
radio02.setStationNumber(3,radio02Stations[98.3])

print("Play the three programmed stations")
radio02.playStation(3)
radio02.playStation(2)
radio02.playStation(1)
</code>




	

<para id="p1089">
<link id="a1099" target-id="Image_14">

Figure 6

</link>

 shows the output produced by the code in 

<link id="a1100" target-id="Image_13">


	Listing 9

</link>

.

</para>











	

<table id="table1012" summary="This is a table." pgwide="630">
<tgroup cols="1">


		

<thead id="thead1012">

			

<row id="tr1024">

				

<entry id="th1012">
<emphasis id="Image_14" effect="bold">

Figure 6

</emphasis>

. Output 
				from the program in Listing 9.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1012">

			

<row id="tr1025">

				

<entry id="td1012">




<code id="pre1013" display="block">
Available stations in Austin
{93.7: 'KLBJ', 91.7: 'KVRX', 98.1: 'KVET', 95.5: 'KKMJ'}
Program the buttons
Play the three programmed stations
Playing KVET
Playing KKMJ
Playing KVRX
Available stations in Dallas
{98.3: 'KNON', 98.7: 'KLUV', 91.7: 'KKXT', 97.9: 'KBFB'}
Program the buttons
Play the three programmed stations
Playing KNON
Playing KBFB
Playing KKXT
</code>




				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1090">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1057" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1014" list-type="bulleted">

					

<item id="li1061">
Module name: Itse1359-1410-Overview of Python classes

</item>


					

<item id="li1062">
File: Itse1359-1410.htm


</item>


					

<item id="li1063">
Published: 10/27/14

</item>




<item id="li1064">
Revised: 02/08/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1058" effect="bold">
Disclaimers:

</emphasis>
<para id="p1091">
<emphasis id="strong1059" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1092">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1093">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1094">
<emphasis id="strong1060" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





<para id="p1095">
-end- 

</para>






</section>
</content>




</document>